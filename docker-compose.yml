version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: rag-console-db
    environment:
      POSTGRES_DB: rag_console
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: rag-console-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - rag-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.15.1
    container_name: rag-console-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD-SHELL", "timeout 10s bash -c 'until printf \"\" 2>>/dev/null >>/dev/tcp/localhost/6333; do sleep 1; done'"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    networks:
      - rag-network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: rag-console-backend
    ports:
      - "8000:8000"
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:password@postgres:5432/rag_console
      REDIS_URL: redis://redis:6379
      
      # Qdrant
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      QDRANT_API_KEY: ""
      
      # Authentication
      JWT_SECRET_KEY: your-super-secret-jwt-key-change-this-in-production
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: 30
      
      # LLM Configuration (set your API keys here)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      DEFAULT_LLM_PROVIDER: ${DEFAULT_LLM_PROVIDER:-openai}
      
      # Embedding Configuration
      EMBEDDING_MODEL: sentence-transformers/all-MiniLM-L6-v2
      EMBEDDING_DIMENSION: 384
      
      # Application Configuration
      APP_NAME: RAG Console
      APP_VERSION: 1.0.0
      DEBUG: "false"
      # Allow local dev frontends (Vite at 8080, Streamlit at 8501). Override via .env ALLOWED_HOSTS if needed.
      # Default also includes your LAN IP seen in Vite output.
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-http://localhost:8080,http://127.0.0.1:8080,http://192.168.100.164:8080,http://localhost:8501,http://127.0.0.1:8501}
      
      # File Upload Configuration
      MAX_FILE_SIZE_MB: 10
      UPLOAD_DIR: /app/uploads
      ALLOWED_FILE_TYPES: pdf,txt,docx
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    volumes:
      - upload_data:/app/uploads
      - ./app:/app/app:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

  # Vite/React Frontend
  frontend:
    image: node:18-alpine
    container_name: rag-console-frontend
    working_dir: /app
    ports:
      - "8080:8080"
    environment:
      # Base URL for the backend API consumed by the frontend
      VITE_API_BASE_URL: http://backend:8000/api/v1
      NODE_ENV: development
    volumes:
      - ./front:/app
    command: sh -c "npm ci && npm run dev -- --host 0.0.0.0 --port 8080"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  upload_data:
    driver: local

networks:
  rag-network:
    driver: bridge